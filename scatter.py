# -*- coding: utf-8 -*-
"""Copy of scatter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FBUIUfiLuHwM1l3nN3YYFXkDC8zeqhGe
"""

import pandas as pd
import numpy as np
import urllib.request as urllib2
from datetime import datetime, timedelta, date

# Import Oxford data and enrich columns for future merging needs
df = pd.read_csv('https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv')
df['Date'] = pd.to_datetime(df['Date'], format="%Y%m%d")
df['DateString'] = df['Date'].apply(lambda x: datetime.strftime(x, "%Y%m%d"))
df['Index'] = df['CountryCode'] + df['DateString']

# Calculate Death Rates
df['DeathRate'] = df['ConfirmedDeaths'] / df['ConfirmedCases']

stocks = pd.read_excel('https://raw.githubusercontent.com/LarsBryld/socialdataanalysis2020/master/data/Markets.xlsx')
stocks = stocks.groupby('CountryCode',sort=False).sum()
#stocks = stocks.rename({'United Kingdom': 'United Kingdom'}, axis='index')

stocks.head(3)

# Reference dates: 23rd and 24th March 2020

market0 = stocks[datetime(2020, 3, 23, 0, 0)]
for i in (8, 9, 10, 16, 17, 20, 21, 27, 29, 30, 31, 32):                            #range(1,len(stocks)):
    market0.iloc[i] = stocks[datetime(2020, 3, 24, 0, 0)][i]

market0.head()         # TO BE DELETED

# Market Performance
mkt_p = stocks.T/market0 -1
mkt_p = mkt_p.T
#mkt_p = mkt_p.reindex(focuscountries)

# showing perfomances from 23rd March onward
mkt_p.iloc[:, 81::].head(2)        # TO BE DELETED

# Converting Market Performances data from rows to columns
mkt_p1 = pd.DataFrame(mkt_p[mkt_p.columns[0]])
mkt_p1['Date'] = mkt_p1.columns.repeat(len(mkt_p1))
mkt_p1.rename(columns={mkt_p1.columns[0]:'MarketPerformance', 'Date':'Date'}, inplace=True)

for i in range(1, len(mkt_p.columns)):
    mkt_p_new = pd.DataFrame(mkt_p[mkt_p.columns[i]])
    mkt_p_new['Date'] = mkt_p_new.columns.repeat(len(mkt_p))
    mkt_p_new.rename(columns={mkt_p_new.columns[0]:'MarketPerformance', 'Date':'Date'}, inplace=True)
    mkt_p1 = pd.concat([mkt_p1, mkt_p_new], axis=0)

mkt_p1.head(2)

# Adding columns needed for merging with Oxford data
mkt_p1['DateString'] = mkt_p1['Date'].apply(lambda x: datetime.strftime(x, "%Y%m%d"))
mkt_p1['Index'] = mkt_p1.index + mkt_p1['DateString']
#mkt_p1.loc['USA']

# Add Market Performance to Oxford file 
df = df.merge(mkt_p1, left_on = 'Index', right_on = 'Index', how = 'left')
df[df['CountryCode']=='USA'].head(3)



# import required packages 
from bokeh.models import Slider, ColumnDataSource, Paragraph, HoverTool, DateRangeSlider, DateSlider
from bokeh.io import curdoc, output_notebook, show
from bokeh.layouts import row, gridplot, column, widgetbox
from bokeh.plotting import figure 
from bokeh.transform import factor_cmap, factor_mark
from bokeh.resources import INLINE
output_notebook(INLINE)




# ref link https://nbviewer.jupyter.org/github/billsanto/notebook_examples/blob/master/bokeh_hover_test.ipynb

#create data for the plot 

data_points = ColumnDataSource(data = {'x' : df['StringencyIndex'], 'y' : df['MarketPerformance']})

#Define function that returns scatter data for year selected by user.
def scatter(selectedYear):
    yr = selectedYear
    df_yr = df[df['Date_y'] == yr]
    df_yr.fillna('No data', inplace = True)
    return df_yr

#create the actual plot

#Add hover tool
hover = HoverTool(tooltips = [ ("Country/region","@CountryName")])

tools = [hover]

plot = figure(title = 'Plot1', plot_height = 600 , plot_width = 950, toolbar_location = None, tools = tools)

plot.scatter(x = 'x', y = 'y', source= data_points, color = 'red')


plot.add_tools(hover)

slider = DateSlider(title="Date Range: ", start=date(2020, 1, 1), end=date.today(), value=date(2020, 1, 1), step=1)

# Define the callback function: update_plot
def callback(attr, old, new):
    yr = slider.value
    source.data = {'x': df[df['StringencyIndex']], 'y': df[df['MarketPerformance']]}
    plot.title.text = 'Market Performance vs. Stringency Index on date %d' %yr
slider.on_change('value',callback)

#create the slider widget 
#slider = DateSlider(title="Date Range: ", start=date(2020, 1, 1), end=date.today(), value=date(2020, 1, 1), step=1)

#slider_widget = DateRangeSlider(title = 'Date', start = start_date, end = end_date, value=(start_date, end_date), step=31*24*60*60*1000, tooltips = False, width=600)

# Make a slider object: slider 
#slider = Slider(title = 'Year',start = 1975, end = 2016, step = 1, value = 2016)
#slider_widget.on_change('value', update_plot)

# Make a column layout of widgetbox(slider) and plot, and add it to the current document
layout = column(plot, widgetbox(slider))
#curdoc().add_root(layout)

#Display plot inline in Jupyter notebook
 
#Display plot
show(layout)